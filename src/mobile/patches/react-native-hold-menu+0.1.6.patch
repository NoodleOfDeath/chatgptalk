diff --git a/node_modules/react-native-hold-menu/lib/typescript/components/menu/types.d.ts b/node_modules/react-native-hold-menu/lib/typescript/components/menu/types.d.ts
index 514e5c9..3cddd4b 100644
--- a/node_modules/react-native-hold-menu/lib/typescript/components/menu/types.d.ts
+++ b/node_modules/react-native-hold-menu/lib/typescript/components/menu/types.d.ts
@@ -1,6 +1,7 @@
 import { TransformOriginAnchorPosition } from '../../utils/calculations';
 
 export type MenuItemProps = {
+  key: string;
   text: string;
   icon?: string | (() => React.ReactElement);
   onPress?: (...args: any[]) => void;
diff --git a/node_modules/react-native-hold-menu/src/components/backdrop/Backdrop.tsx b/node_modules/react-native-hold-menu/src/components/backdrop/Backdrop.tsx
index dc5fa35..0048038 100644
--- a/node_modules/react-native-hold-menu/src/components/backdrop/Backdrop.tsx
+++ b/node_modules/react-native-hold-menu/src/components/backdrop/Backdrop.tsx
@@ -121,6 +121,7 @@ const BackdropComponent = () => {
         style={[styles.container, animatedContainerStyle]}
       >
         <Animated.View
+          onTouchStart={() => state.value = CONTEXT_MENU_STATE.END}
           style={[
             { ...StyleSheet.absoluteFillObject },
             animatedInnerContainerStyle,
diff --git a/node_modules/react-native-hold-menu/src/components/holdItem/HoldItem.tsx b/node_modules/react-native-hold-menu/src/components/holdItem/HoldItem.tsx
index fc7dab4..8417e0e 100644
--- a/node_modules/react-native-hold-menu/src/components/holdItem/HoldItem.tsx
+++ b/node_modules/react-native-hold-menu/src/components/holdItem/HoldItem.tsx
@@ -1,5 +1,5 @@
 import React, { memo, useMemo } from 'react';
-import { ViewProps } from 'react-native';
+import { ViewProps, useWindowDimensions } from 'react-native';
 
 //#region reanimated & gesture handler
 import {
@@ -71,6 +71,7 @@ const HoldItemComponent = ({
   //#region hooks
   const { state, menuProps, safeAreaInsets } = useInternal();
   const deviceOrientation = useDeviceOrientation();
+  const { fontScale } = useWindowDimensions();
   //#endregion
 
   //#region variables
@@ -91,7 +92,7 @@ const HoldItemComponent = ({
   const key = useMemo(() => `hold-item-${nanoid()}`, []);
   const menuHeight = useMemo(() => {
     const itemsWithSeparator = items.filter(item => item.withSeparator);
-    return calculateMenuHeight(items.length, itemsWithSeparator.length);
+    return calculateMenuHeight(fontScale, items.length, itemsWithSeparator.length);
   }, [items]);
 
   const isHold = !activateOn || activateOn === 'hold';
@@ -128,6 +129,7 @@ const HoldItemComponent = ({
     'worklet';
     if (!ctx.didMeasureLayout) {
       const measured = measure(containerRef);
+      if (!measured) return;
 
       itemRectY.value = measured.pageY;
       itemRectX.value = measured.pageX;
diff --git a/node_modules/react-native-hold-menu/src/components/menu/MenuItems.tsx b/node_modules/react-native-hold-menu/src/components/menu/MenuItems.tsx
index bef7a30..6b48188 100644
--- a/node_modules/react-native-hold-menu/src/components/menu/MenuItems.tsx
+++ b/node_modules/react-native-hold-menu/src/components/menu/MenuItems.tsx
@@ -11,7 +11,7 @@ const MenuItemsComponent = ({ items }: { items: MenuItemProps[] }) => {
       {items.map((item: MenuItemProps, index: number) => {
         return (
           <MenuItem
-            key={index}
+            key={item.key}
             item={item}
             isLast={items.length === index + 1}
           />
diff --git a/node_modules/react-native-hold-menu/src/components/menu/MenuList.tsx b/node_modules/react-native-hold-menu/src/components/menu/MenuList.tsx
index 875d6b5..43a80af 100644
--- a/node_modules/react-native-hold-menu/src/components/menu/MenuList.tsx
+++ b/node_modules/react-native-hold-menu/src/components/menu/MenuList.tsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import { StyleSheet } from 'react-native';
+import { StyleSheet, useWindowDimensions } from 'react-native';
 
 import Animated, {
   runOnJS,
@@ -37,6 +37,7 @@ const AnimatedView = Animated.createAnimatedComponent(BlurView);
 
 const MenuListComponent = () => {
   const { state, theme, menuProps } = useInternal();
+  const { fontScale } = useWindowDimensions();
 
   const [itemList, setItemList] = React.useState<MenuItemProps[]>([]);
 
@@ -45,6 +46,7 @@ const MenuListComponent = () => {
       item => item.withSeparator
     );
     return calculateMenuHeight(
+      fontScale,
       menuProps.value.items.length,
       itemsWithSeparator.length
     );
@@ -57,6 +59,7 @@ const MenuListComponent = () => {
     );
 
     const translate = menuAnimationAnchor(
+      fontScale,
       menuProps.value.anchorPosition,
       menuProps.value.itemWidth,
       menuProps.value.items.length,
diff --git a/node_modules/react-native-hold-menu/src/components/menu/types.d.ts b/node_modules/react-native-hold-menu/src/components/menu/types.d.ts
index 514e5c9..3cddd4b 100644
--- a/node_modules/react-native-hold-menu/src/components/menu/types.d.ts
+++ b/node_modules/react-native-hold-menu/src/components/menu/types.d.ts
@@ -1,6 +1,7 @@
 import { TransformOriginAnchorPosition } from '../../utils/calculations';
 
 export type MenuItemProps = {
+  key: string;
   text: string;
   icon?: string | (() => React.ReactElement);
   onPress?: (...args: any[]) => void;
diff --git a/node_modules/react-native-hold-menu/src/hooks/useDeviceOrientation.ts b/node_modules/react-native-hold-menu/src/hooks/useDeviceOrientation.ts
index 883a660..5444943 100644
--- a/node_modules/react-native-hold-menu/src/hooks/useDeviceOrientation.ts
+++ b/node_modules/react-native-hold-menu/src/hooks/useDeviceOrientation.ts
@@ -1,27 +1,11 @@
-import { useState, useEffect } from 'react';
-import { Dimensions } from 'react-native';
+import { useMemo } from 'react';
+import { useWindowDimensions } from 'react-native';
 
 type Orientation = 'landscape' | 'portrait';
 
-function getWindowOrientation(): Orientation {
-  const { width, height } = Dimensions.get('window');
-  return height >= width ? 'portrait' : 'landscape';
-}
-
 function useDeviceOrientation() {
-  const [deviceOrientation, setDeviceOrientation] = useState<Orientation>(
-    getWindowOrientation()
-  );
-
-  useEffect(() => {
-    function updateState() {
-      setDeviceOrientation(getWindowOrientation());
-    }
-    const changeEvent = Dimensions.addEventListener('change', updateState);
-    // @ts-ignore
-    return () => changeEvent.remove();
-  }, []);
-
+  const { width, height } = useWindowDimensions();
+  const deviceOrientation = useMemo<Orientation>(() => height >= width ? 'portrait' : 'landscape', [width, height]);
   return deviceOrientation;
 }
 
diff --git a/node_modules/react-native-hold-menu/src/utils/calculations.ts b/node_modules/react-native-hold-menu/src/utils/calculations.ts
index ded4e00..fa053d0 100644
--- a/node_modules/react-native-hold-menu/src/utils/calculations.ts
+++ b/node_modules/react-native-hold-menu/src/utils/calculations.ts
@@ -2,24 +2,24 @@ import styleGuide from '../styleGuide';
 import {
   MENU_WIDTH,
   MENU_TRANSFORM_ORIGIN_TOLERENCE,
-  FONT_SCALE,
 } from '../constants';
 
-export const MenuItemHeight = () => {
+export const MenuItemHeight = (fontScale: number) => {
   'worklet';
   return (
-    styleGuide.typography.callout.lineHeight * FONT_SCALE +
+    styleGuide.typography.callout.lineHeight * fontScale +
     styleGuide.spacing * 2.5
   );
 };
 
 export const calculateMenuHeight = (
+  fontScale: number,
   itemLength: number,
   separatorCount: number
 ) => {
   'worklet';
   return (
-    MenuItemHeight() * itemLength +
+    MenuItemHeight(fontScale) * itemLength +
     (itemLength - 1) +
     separatorCount * styleGuide.spacing
   );
@@ -34,13 +34,14 @@ export type TransformOriginAnchorPosition =
   | 'bottom-center';
 
 export const menuAnimationAnchor = (
+  fontScale: number,
   anchorPoint: TransformOriginAnchorPosition,
   itemWidth: number,
   itemLength: number,
   itemsWithSeparatorLength: number
 ) => {
   'worklet';
-  const MenuHeight = calculateMenuHeight(itemLength, itemsWithSeparatorLength);
+  const MenuHeight = calculateMenuHeight(fontScale, itemLength, itemsWithSeparatorLength);
   const splittetAnchorName: string[] = anchorPoint.split('-');
 
   const Center1 = itemWidth;

//
// MetricAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MetricAttributes: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case click = "click"
        case nav = "nav"
    }
    public var deletedAt: Date?
    public var updatedAt: Date?
    public var createdAt: Date?
    public var id: Double
    /** the user agent info of the consumer of this referral */
    public var userAgent: String
    /** ip address(es) of actor */
    public var referrer: [String]?
    /** Construct a type with a set of properties K of type T */
    public var data: AnyCodable
    public var type: ModelType

    public init(deletedAt: Date? = nil, updatedAt: Date? = nil, createdAt: Date? = nil, id: Double, userAgent: String, referrer: [String]? = nil, data: AnyCodable, type: ModelType) {
        self.deletedAt = deletedAt
        self.updatedAt = updatedAt
        self.createdAt = createdAt
        self.id = id
        self.userAgent = userAgent
        self.referrer = referrer
        self.data = data
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deletedAt
        case updatedAt
        case createdAt
        case id
        case userAgent
        case referrer
        case data
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(id, forKey: .id)
        try container.encode(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(referrer, forKey: .referrer)
        try container.encode(data, forKey: .data)
        try container.encode(type, forKey: .type)
    }
}


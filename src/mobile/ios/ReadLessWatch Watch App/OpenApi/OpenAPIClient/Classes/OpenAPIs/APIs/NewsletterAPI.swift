//
// NewsletterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NewsletterAPI {

    /**

     - parameter subscriptionCreationAttributes: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subscribeToNewsletter(subscriptionCreationAttributes: SubscriptionCreationAttributes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SubscriptionAttributes?, _ error: Error?) -> Void)) -> RequestTask {
        return subscribeToNewsletterWithRequestBuilder(subscriptionCreationAttributes: subscriptionCreationAttributes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/newsletter/subscribe
     - parameter subscriptionCreationAttributes: (body)  
     - returns: RequestBuilder<SubscriptionAttributes> 
     */
    open class func subscribeToNewsletterWithRequestBuilder(subscriptionCreationAttributes: SubscriptionCreationAttributes) -> RequestBuilder<SubscriptionAttributes> {
        let localVariablePath = "/v1/newsletter/subscribe"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionCreationAttributes)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionAttributes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter subscriptionCreationAttributes: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unsubscribeFromNewsletter(subscriptionCreationAttributes: SubscriptionCreationAttributes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return unsubscribeFromNewsletterWithRequestBuilder(subscriptionCreationAttributes: subscriptionCreationAttributes).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/newsletter/unsubscribe
     - parameter subscriptionCreationAttributes: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func unsubscribeFromNewsletterWithRequestBuilder(subscriptionCreationAttributes: SubscriptionCreationAttributes) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/newsletter/unsubscribe"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionCreationAttributes)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

//
// SummaryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SummaryAPI {

    /**

     - parameter targetId: (path)  
     - parameter payloadWithUserId: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func destroySummary(targetId: Double, payloadWithUserId: PayloadWithUserId, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DestroyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return destroySummaryWithRequestBuilder(targetId: targetId, payloadWithUserId: payloadWithUserId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/summary/{targetId}
     - parameter targetId: (path)  
     - parameter payloadWithUserId: (body)  
     - returns: RequestBuilder<DestroyResponse> 
     */
    open class func destroySummaryWithRequestBuilder(targetId: Double, payloadWithUserId: PayloadWithUserId) -> RequestBuilder<DestroyResponse> {
        var localVariablePath = "/v1/summary/{targetId}"
        let targetIdPreEscape = "\(APIHelper.mapValueToPathItem(targetId))"
        let targetIdPostEscape = targetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetId}", with: targetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadWithUserId)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DestroyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter userId: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter ids: (query)  (optional)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 0)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSummaries(userId: Double? = nil, filter: String? = nil, ids: [Double]? = nil, pageSize: Double? = nil, page: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BulkResponsePublicSummaryAttributes?, _ error: Error?) -> Void)) -> RequestTask {
        return getSummariesWithRequestBuilder(userId: userId, filter: filter, ids: ids, pageSize: pageSize, page: page, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/summary
     - parameter userId: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter ids: (query)  (optional)
     - parameter pageSize: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 0)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<BulkResponsePublicSummaryAttributes> 
     */
    open class func getSummariesWithRequestBuilder(userId: Double? = nil, filter: String? = nil, ids: [Double]? = nil, pageSize: Double? = nil, page: Double? = nil, offset: Double? = nil) -> RequestBuilder<BulkResponsePublicSummaryAttributes> {
        let localVariablePath = "/v1/summary"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BulkResponsePublicSummaryAttributes>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter targetId: (path)  
     - parameter type: (path)  
     - parameter interactionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interactWithSummary(targetId: Double, type: InteractionType, interactionRequest: InteractionRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InteractionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return interactWithSummaryWithRequestBuilder(targetId: targetId, type: type, interactionRequest: interactionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/summary/interact/{targetId}/{type}
     - parameter targetId: (path)  
     - parameter type: (path)  
     - parameter interactionRequest: (body)  
     - returns: RequestBuilder<InteractionResponse> 
     */
    open class func interactWithSummaryWithRequestBuilder(targetId: Double, type: InteractionType, interactionRequest: InteractionRequest) -> RequestBuilder<InteractionResponse> {
        var localVariablePath = "/v1/summary/interact/{targetId}/{type}"
        let targetIdPreEscape = "\(APIHelper.mapValueToPathItem(targetId))"
        let targetIdPostEscape = targetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetId}", with: targetIdPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InteractionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter targetId: (path)  
     - parameter payloadWithUserId: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func restoreSummary(targetId: Double, payloadWithUserId: PayloadWithUserId, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DestroyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return restoreSummaryWithRequestBuilder(targetId: targetId, payloadWithUserId: payloadWithUserId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v1/summary/restore/{targetId}
     - parameter targetId: (path)  
     - parameter payloadWithUserId: (body)  
     - returns: RequestBuilder<DestroyResponse> 
     */
    open class func restoreSummaryWithRequestBuilder(targetId: Double, payloadWithUserId: PayloadWithUserId) -> RequestBuilder<DestroyResponse> {
        var localVariablePath = "/v1/summary/restore/{targetId}"
        let targetIdPreEscape = "\(APIHelper.mapValueToPathItem(targetId))"
        let targetIdPostEscape = targetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetId}", with: targetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadWithUserId)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DestroyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

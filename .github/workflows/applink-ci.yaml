name: Applink CI

on:
  push:
    branches:
      - main
      - dev
    paths:
      - ".github/workflows/applink-ci.yaml"
      - "package.json"
      - "Dockerfile.applink"
      - "k8s/applink-deploy.yaml"
      - "src/server/package.json"
      - "src/server/public/**"
      - "src/server/src/api/**"
      - "src/server/src/applink/**"
      - "src/server/src/services/**"
      - "src/server/src/types/**"
      - "src/server/src/utils/**"

concurrency:
  group: ${{ github.ref }}-applink
  cancel-in-progress: true

env:
  IMAGE: ${{ github.event.repository.name }}-applink-${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
  REGISTRY: ${{ vars.REGISTRY }}

jobs:
  build-applink:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '~applink') && !contains(github.event.head_commit.message, '~skip') }}
    environment: ${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
    steps:
      - name: Print Job Description
        run: |
          echo building \"$IMAGE\" from branch \"${{ github.ref_name }}\"
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT_SSH_KEY }}
          submodules: recursive
      - name: Build
        run: |
          docker build . \
            --file Dockerfile.applink \
            --tag $IMAGE:latest
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to doctl
        run: doctl registry login --expiry-seconds 600
      - name: Tag Docker Image
        run: docker tag $IMAGE:latest $REGISTRY/$IMAGE:latest
      - name: Push Docker Image
        run: docker push $REGISTRY/$IMAGE:latest

  deploy-applink:
    needs: build-applink
    runs-on: ubuntu-latest
    environment: ${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
    env:
      API_RATE_LIMIT: ${{ vars.API_RATE_LIMIT }}
      API_RATE_LIMIT_DURATION: ${{ vars.API_RATE_LIMIT_DURATION }}
      BASE_DOMAIN: ${{ vars.BASE_DOMAIN }}
      CORS_ORIGIN: ${{ vars.CORS_ORIGIN }}
      ENABLED_FEATURES: ${{ vars.ENABLED_FEATURES }}
      GOOGLE_CLIENT_ID: ${{ vars.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
      K8S_MEMORY_REQUESTS: ${{ vars.K8S_MEMORY_REQUESTS }}
      K8S_CPU_REQUESTS: ${{ vars.K8S_CPU_REQUESTS }}
      K8S_MEMORY_LIMITS: ${{ vars.K8S_MEMORY_LIMITS }}
      K8S_CPU_LIMITS: ${{ vars.K8S_CPU_LIMITS }}
      K8S_REPLICA_COUNT_API: ${{ vars.K8S_REPLICA_COUNT_API }}
      MAIL_HOST: ${{ vars.MAIL_HOST }}
      MAIL_PASS: ${{ secrets.MAIL_PASS }}
      MAIL_PORT: ${{ vars.MAIL_PORT }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      PG_CONNECTION_STRING: ${{ secrets.PG_CONNECTION_STRING }}
      PORT: ${{ vars.PORT }}
      RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
      SSL: ${{ vars.SSL }}
    steps:
      - name: Print Job Description
        run: |
          echo deploying \"$IMAGE\" from branch \"${{ github.ref_name }}\"
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT_SSH_KEY }}
          submodules: recursive
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Add kubectl cert
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.K8S_CLUSTER_ID }}
      - name: Apply deployment changes
        run: envsubst < $GITHUB_WORKSPACE/k8s/applink-deploy.yaml | kubectl apply -f -
      - name: Deploy Rollout
        run: kubectl rollout restart deployment/$IMAGE --namespace $K8S_NAMESPACE
      - name: Verify deployment
        run: kubectl rollout status deployment/$IMAGE --namespace $K8S_NAMESPACE

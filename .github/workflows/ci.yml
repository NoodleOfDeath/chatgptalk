name: CI

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - "**.md"
      - "tests/**"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ secrets.REGISTRY }}

jobs:
  build-client:
    runs-on: ubuntu-latest
    environment: ${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
    env:
      IMAGE: ${{ github.event.repository.name }}-client-${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
      WORKING_DIR: src/client
      API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
      GENERATE_SOURCEMAP: ${{ secrets.GENERATE_SOURCEMAP }}
    steps:
      - name: Print Job Description
        run: |
          echo building \"$IMAGE\" from branch \"${{ github.ref_name }}\"
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT_SSH_KEY }}
          submodules: recursive
      - name: Build
        run: |
          cd $WORKING_DIR && \
          docker build . --file Dockerfile --tag $IMAGE:latest \
            --build-arg API_ENDPOINT=$API_ENDPOINT \
            --build-arg GENERATE_SOURCEMAP=$GENERATE_SOURCEMAP
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to doctl
        run: doctl registry login --expiry-seconds 180
      - name: Tag Docker Image
        run: docker tag $IMAGE:latest $REGISTRY/$IMAGE:latest
      - name: Push Docker Image
        run: docker push $REGISTRY/$IMAGE:latest

  # build-api:
  #   needs: build-client
  #   runs-on: ubuntu-latest
  #   environment: ${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
  #   env:
  #     IMAGE: ${{ github.event.repository.name }}-api-${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
  #   steps:
  #     - name: Print Job Description
  #       run: |
  #         echo building \"$IMAGE-$COMPONENT\" from branch \"${{ github.ref_name }}\"
  #     - name: Git Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ssh-key: ${{ secrets.GIT_SSH_KEY }}
  #         submodules: recursive
  #     - name: Build
  #       run: docker build . --file Dockerfile --tag $IMAGE-ui:latest
  #     - name: Install doctl
  #       uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #     - name: Log in to doctl
  #       run: doctl registry login --expiry-seconds 180
  #     - name: Tag Docker Image
  #       run: docker tag $IMAGE:latest $REGISTRY/$IMAGE:latest
  #     - name: Push Docker Image
  #       run: docker push $REGISTRY/$IMAGE:latest

  deploy-client:
    needs: build-client
    runs-on: ubuntu-latest
    environment: ${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
    env:
      IMAGE: ${{ github.event.repository.name }}-client-${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
      WORKING_DIR: src/client
      K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
      K8S_MEMORY_REQUESTS: ${{ secrets.K8S_MEMORY_REQUESTS }}
      K8S_CPU_REQUESTS: ${{ secrets.K8S_CPU_REQUESTS }}
      K8S_MEMORY_LIMITS: ${{ secrets.K8S_MEMORY_LIMITS }}
      K8S_CPU_LIMITS: ${{ secrets.K8S_CPU_LIMITS }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Print Job Description
        run: |
          echo deploying \"$IMAGE\" from branch \"${{ github.ref_name }}\"
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT_SSH_KEY }}
          submodules: recursive
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Add kubectl cert
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.K8S_CLUSTER_ID }}
      - name: Apply deployment changes
        run: envsubst < $GITHUB_WORKSPACE/k8s/deploy.yaml | kubectl apply -f -
      - name: Deploy Rollout
        run: kubectl rollout restart deployment/$IMAGE --namespace $K8S_NAMESPACE
      - name: Verify deployment
        run: kubectl rollout status deployment/$IMAGE --namespace $K8S_NAMESPACE

  # deploy-api:
  #   needs: build-api
  #   runs-on: ubuntu-latest
  #   environment: ${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
  #   env:
  #     IMAGE: ${{ github.event.repository.name }}-api-${{ fromJSON('{"main":"prod"}')[github.ref_name] || github.ref_name }}
  #     CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  #     K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
  #     K8S_MEMORY_REQUESTS: ${{ secrets.K8S_MEMORY_REQUESTS }}
  #     K8S_CPU_REQUESTS: ${{ secrets.K8S_CPU_REQUESTS }}
  #     K8S_MEMORY_LIMITS: ${{ secrets.K8S_MEMORY_LIMITS }}
  #     K8S_CPU_LIMITS: ${{ secrets.K8S_CPU_LIMITS }}
  #     PG_URL: ${{ secrets.PG_URL }}
  #     PORT: ${{ secrets.PORT }}
  #     RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
  #   steps:
  #     - name: Print Job Description
  #       run: |
  #         echo deploying \"$IMAGE-$COMPONENT\" from branch \"${{ github.ref_name }}\"
  #     - name: Git Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ssh-key: ${{ secrets.GIT_SSH_KEY }}
  #         submodules: recursive
  #     - name: Install doctl
  #       uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #     - name: Add kubectl cert
  #       run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.K8S_CLUSTER_ID }}
  #     - name: Apply deployment changes
  #       run: envsubst < $GITHUB_WORKSPACE/k8s/deploy.yaml | kubectl apply -f -
  #     - name: Deploy Rollout
  #       run: kubectl rollout restart deployment/$IMAGE --namespace $K8S_NAMESPACE
  #     - name: Verify deployment
  #       run: kubectl rollout status deployment/$IMAGE --namespace $K8S_NAMESPACE
